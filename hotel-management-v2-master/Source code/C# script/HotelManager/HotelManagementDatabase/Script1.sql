/*
Deployment script for 22

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "22"
:setvar DefaultFilePrefix "22"
:setvar DefaultDataPath "C:\Users\skhan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\skhan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[AccessRights]...';


GO
CREATE TABLE [dbo].[AccessRights] (
    [IDStaffType] INT NOT NULL,
    [IDJob]       INT NOT NULL,
    CONSTRAINT [PK_Access] PRIMARY KEY CLUSTERED ([IDStaffType] ASC, [IDJob] ASC)
);


GO
PRINT N'Creating Table [dbo].[Bill]...';


GO
CREATE TABLE [dbo].[Bill] (
    [ID]            INT            IDENTITY (1, 1) NOT NULL,
    [IDReceiveRoom] INT            NOT NULL,
    [StaffSetUp]    NVARCHAR (100) NOT NULL,
    [DateOfCreate]  SMALLDATETIME  NULL,
    [RoomPrice]     INT            NOT NULL,
    [ServicePrice]  INT            NOT NULL,
    [TotalPrice]    INT            NOT NULL,
    [Discount]      INT            NOT NULL,
    [IDStatusBill]  INT            NOT NULL,
    [Surcharge]     INT            NOT NULL,
    [AmountPaid]    INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[BillDetails]...';


GO
CREATE TABLE [dbo].[BillDetails] (
    [IDBill]     INT NOT NULL,
    [IDService]  INT NOT NULL,
    [Count]      INT NOT NULL,
    [TotalPrice] INT NOT NULL,
    CONSTRAINT [PK_BillInfo] PRIMARY KEY CLUSTERED ([IDService] ASC, [IDBill] ASC)
);


GO
PRINT N'Creating Table [dbo].[BookRoom]...';


GO
CREATE TABLE [dbo].[BookRoom] (
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    [IDCustomer]           INT           NOT NULL,
    [IDRoomType]           INT           NOT NULL,
    [DateBookRoom]         SMALLDATETIME NOT NULL,
    [DateCheckIn]          DATE          NOT NULL,
    [DateCheckOut]         DATE          NOT NULL,
    [ActualCheckOutDate]   DATE          NULL,
    [BookingType]          INT           NULL,
    [RoomNo]               INT           NULL,
    [PriceChargedPerNight] INT           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[ChargeService2Room]...';


GO
CREATE TABLE [dbo].[ChargeService2Room] (
    [ID]              INT            IDENTITY (1, 1) NOT NULL,
    [IDReservationId] INT            NOT NULL,
    [Details]         NVARCHAR (300) NULL,
    [StaffSetUp]      NVARCHAR (100) NOT NULL,
    [ServiceId]       INT            NOT NULL,
    [DateOfCreate]    SMALLDATETIME  NULL,
    [ServicePrice]    INT            NOT NULL,
    [TotalPrice]      INT            NOT NULL,
    [Discount]        INT            NOT NULL,
    [IDStatusBill]    INT            NOT NULL,
    [Quantity]        INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CheckOutRoom]...';


GO
CREATE TABLE [dbo].[CheckOutRoom] (
    [ID]           INT  IDENTITY (1, 1) NOT NULL,
    [IDBookRoom]   INT  NOT NULL,
    [IDRoom]       INT  NOT NULL,
    [CheckOutDate] DATE NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CheckOutRoomDetails]...';


GO
CREATE TABLE [dbo].[CheckOutRoomDetails] (
    [IDReceiveRoom]   INT NOT NULL,
    [IDCustomerOther] INT NOT NULL,
    CONSTRAINT [PK_ReceiveRoomDetails] PRIMARY KEY CLUSTERED ([IDReceiveRoom] ASC, [IDCustomerOther] ASC)
);


GO
PRINT N'Creating Table [dbo].[Company]...';


GO
CREATE TABLE [dbo].[Company] (
    [name]             NVARCHAR (200) NOT NULL,
    [address]          NVARCHAR (200) NOT NULL,
    [email]            NVARCHAR (100) NOT NULL,
    [phone]            NVARCHAR (200) NOT NULL,
    [repContactNumber] NVARCHAR (200) NULL,
    [repName]          NVARCHAR (200) NULL,
    [repId]            NVARCHAR (200) NULL,
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [ID]             INT            IDENTITY (1, 1) NOT NULL,
    [IDCard]         NVARCHAR (100) NOT NULL,
    [IDCustomerType] INT            NOT NULL,
    [Name]           NVARCHAR (100) NOT NULL,
    [DateOfBirth]    DATE           NOT NULL,
    [Address]        NVARCHAR (200) NOT NULL,
    [email]          NVARCHAR (200) NULL,
    [City]           NVARCHAR (200) NULL,
    [PhoneNumber]    NVARCHAR (100) NOT NULL,
    [Sex]            NVARCHAR (100) NOT NULL,
    [Nationality]    NVARCHAR (100) NOT NULL,
    [RefCompany]     INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([IDCard] ASC)
);


GO
PRINT N'Creating Table [dbo].[CustomerType]...';


GO
CREATE TABLE [dbo].[CustomerType] (
    [ID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[HBill]...';


GO
CREATE TABLE [dbo].[HBill] (
    [ID]            INT            IDENTITY (1, 1) NOT NULL,
    [IDReceiveRoom] INT            NOT NULL,
    [StaffSetUp]    NVARCHAR (100) NOT NULL,
    [DateOfCreate]  SMALLDATETIME  NULL,
    [RoomPrice]     INT            NOT NULL,
    [ServicePrice]  INT            NOT NULL,
    [TotalPrice]    INT            NOT NULL,
    [Discount]      INT            NOT NULL,
    [IDStatusBill]  INT            NOT NULL,
    [Surcharge]     INT            NOT NULL,
    [ChangedDate]   DATETIME       NOT NULL,
    [UserID]        NVARCHAR (20)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[HBookRoom]...';


GO
CREATE TABLE [dbo].[HBookRoom] (
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    [RoomNo]               INT           NULL,
    [IDCustomer]           INT           NOT NULL,
    [IDRoomType]           INT           NOT NULL,
    [DateBookRoom]         SMALLDATETIME NOT NULL,
    [DateCheckIn]          DATE          NOT NULL,
    [DateCheckOut]         DATE          NOT NULL,
    [UserID]               NVARCHAR (20) NOT NULL,
    [ChangedDate]          DATETIME      NOT NULL,
    [BookingType]          INT           NULL,
    [PriceChargedPerNight] INT           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[HCheckOutRoom]...';


GO
CREATE TABLE [dbo].[HCheckOutRoom] (
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    [IDBookRoom]   INT           NOT NULL,
    [IDRoom]       INT           NOT NULL,
    [CheckOutDate] DATE          NULL,
    [UserID]       NVARCHAR (20) NOT NULL,
    [ChangedDate]  DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[JOB]...';


GO
CREATE TABLE [dbo].[JOB] (
    [ID]       INT            IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (100) NOT NULL,
    [NameForm] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Parameter]...';


GO
CREATE TABLE [dbo].[Parameter] (
    [Name]       NVARCHAR (100) NOT NULL,
    [Value]      FLOAT (53)     NULL,
    [Describe]   NVARCHAR (200) NULL,
    [DateModify] SMALLDATETIME  NULL,
    UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating Table [dbo].[Payments]...';


GO
CREATE TABLE [dbo].[Payments] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [BillID]      INT            NOT NULL,
    [PaymentDate] DATE           NOT NULL,
    [PaymentMode] NVARCHAR (200) NOT NULL,
    [AmountPaid]  INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[REPORT]...';


GO
CREATE TABLE [dbo].[REPORT] (
    [idRoomType] INT        NOT NULL,
    [value]      INT        NOT NULL,
    [rate]       FLOAT (53) NOT NULL,
    [Month]      INT        NOT NULL,
    [Year]       INT        NOT NULL,
    CONSTRAINT [PK_Report] PRIMARY KEY CLUSTERED ([idRoomType] ASC, [Month] ASC, [Year] ASC)
);


GO
PRINT N'Creating Table [dbo].[Room]...';


GO
CREATE TABLE [dbo].[Room] (
    [ID]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (100) NOT NULL,
    [IDRoomType]   INT            NOT NULL,
    [IDStatusRoom] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[RoomType]...';


GO
CREATE TABLE [dbo].[RoomType] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [Price]       INT            NOT NULL,
    [LimitPerson] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Service]...';


GO
CREATE TABLE [dbo].[Service] (
    [ID]            INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (200) NOT NULL,
    [IDServiceType] INT            NOT NULL,
    [Price]         INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Service2Bill]...';


GO
CREATE TABLE [dbo].[Service2Bill] (
    [Service2BillId] INT IDENTITY (1, 1) NOT NULL,
    [IDRoom]         INT NOT NULL,
    [IDService]      INT NOT NULL,
    [Count]          INT NOT NULL,
    [TotalPrice]     INT NOT NULL,
    [Status]         INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Service2BillId] ASC)
);


GO
PRINT N'Creating Table [dbo].[ServiceType]...';


GO
CREATE TABLE [dbo].[ServiceType] (
    [ID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Staff]...';


GO
CREATE TABLE [dbo].[Staff] (
    [UserName]    NVARCHAR (100) NOT NULL,
    [DisplayName] NVARCHAR (100) NOT NULL,
    [PassWord]    NVARCHAR (100) NOT NULL,
    [IDStaffType] INT            NOT NULL,
    [IDCard]      NVARCHAR (100) NOT NULL,
    [DateOfBirth] DATE           NOT NULL,
    [Sex]         NVARCHAR (100) NOT NULL,
    [Address]     NVARCHAR (200) NOT NULL,
    [PhoneNumber] INT            NOT NULL,
    [StartDay]    DATE           NOT NULL,
    PRIMARY KEY CLUSTERED ([UserName] ASC),
    UNIQUE NONCLUSTERED ([IDCard] ASC)
);


GO
PRINT N'Creating Table [dbo].[StaffType]...';


GO
CREATE TABLE [dbo].[StaffType] (
    [ID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[StatusBill]...';


GO
CREATE TABLE [dbo].[StatusBill] (
    [ID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[StatusRoom]...';


GO
CREATE TABLE [dbo].[StatusRoom] (
    [ID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT (getdate()) FOR [DateOfCreate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [RoomPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [ServicePrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [TotalPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [Discount];


GO
PRINT N'Creating Default Constraint [dbo].[DF__Bill__IDStatusBi__1DB06A4F]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD CONSTRAINT [DF__Bill__IDStatusBi__1DB06A4F] DEFAULT ((1)) FOR [IDStatusBill];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [Surcharge];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill]
    ADD DEFAULT ((0)) FOR [AmountPaid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[BillDetails]...';


GO
ALTER TABLE [dbo].[BillDetails]
    ADD DEFAULT ((0)) FOR [TotalPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT (getdate()) FOR [DateOfCreate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT ((0)) FOR [ServicePrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT ((0)) FOR [TotalPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT ((0)) FOR [Discount];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT ((1)) FOR [IDStatusBill];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room]
    ADD DEFAULT ((1)) FOR [Quantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Customer]...';


GO
ALTER TABLE [dbo].[Customer]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Customer]...';


GO
ALTER TABLE [dbo].[Customer]
    ADD DEFAULT ((-1)) FOR [RefCompany];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[CustomerType]...';


GO
ALTER TABLE [dbo].[CustomerType]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT (getdate()) FOR [DateOfCreate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT ((0)) FOR [RoomPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT ((0)) FOR [ServicePrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT ((0)) FOR [TotalPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT ((0)) FOR [Discount];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT ((0)) FOR [Surcharge];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBill]...';


GO
ALTER TABLE [dbo].[HBill]
    ADD DEFAULT (getdate()) FOR [ChangedDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HBookRoom]...';


GO
ALTER TABLE [dbo].[HBookRoom]
    ADD DEFAULT (getdate()) FOR [ChangedDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HCheckOutRoom]...';


GO
ALTER TABLE [dbo].[HCheckOutRoom]
    ADD DEFAULT (getdate()) FOR [ChangedDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Parameter]...';


GO
ALTER TABLE [dbo].[Parameter]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Parameter]...';


GO
ALTER TABLE [dbo].[Parameter]
    ADD DEFAULT (getdate()) FOR [DateModify];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[REPORT]...';


GO
ALTER TABLE [dbo].[REPORT]
    ADD DEFAULT ((0)) FOR [value];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[REPORT]...';


GO
ALTER TABLE [dbo].[REPORT]
    ADD DEFAULT ((0)) FOR [rate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[REPORT]...';


GO
ALTER TABLE [dbo].[REPORT]
    ADD DEFAULT ((1)) FOR [Month];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[REPORT]...';


GO
ALTER TABLE [dbo].[REPORT]
    ADD DEFAULT ((1990)) FOR [Year];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Room]...';


GO
ALTER TABLE [dbo].[Room]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[RoomType]...';


GO
ALTER TABLE [dbo].[RoomType]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Service]...';


GO
ALTER TABLE [dbo].[Service]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Service2Bill]...';


GO
ALTER TABLE [dbo].[Service2Bill]
    ADD DEFAULT ((0)) FOR [TotalPrice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Service2Bill]...';


GO
ALTER TABLE [dbo].[Service2Bill]
    ADD DEFAULT ((0)) FOR [Status];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ServiceType]...';


GO
ALTER TABLE [dbo].[ServiceType]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Staff]...';


GO
ALTER TABLE [dbo].[Staff]
    ADD DEFAULT (N'No Name') FOR [DisplayName];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[StaffType]...';


GO
ALTER TABLE [dbo].[StaffType]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[StatusBill]...';


GO
ALTER TABLE [dbo].[StatusBill]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[StatusRoom]...';


GO
ALTER TABLE [dbo].[StatusRoom]
    ADD DEFAULT (N'No Name') FOR [Name];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[AccessRights]...';


GO
ALTER TABLE [dbo].[AccessRights] WITH NOCHECK
    ADD FOREIGN KEY ([IDJob]) REFERENCES [dbo].[JOB] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[AccessRights]...';


GO
ALTER TABLE [dbo].[AccessRights] WITH NOCHECK
    ADD FOREIGN KEY ([IDStaffType]) REFERENCES [dbo].[StaffType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill] WITH NOCHECK
    ADD FOREIGN KEY ([IDStatusBill]) REFERENCES [dbo].[StatusBill] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Bill]...';


GO
ALTER TABLE [dbo].[Bill] WITH NOCHECK
    ADD FOREIGN KEY ([StaffSetUp]) REFERENCES [dbo].[Staff] ([UserName]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BillDetails]...';


GO
ALTER TABLE [dbo].[BillDetails] WITH NOCHECK
    ADD FOREIGN KEY ([IDBill]) REFERENCES [dbo].[Bill] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BillDetails]...';


GO
ALTER TABLE [dbo].[BillDetails] WITH NOCHECK
    ADD FOREIGN KEY ([IDService]) REFERENCES [dbo].[Service] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BookRoom]...';


GO
ALTER TABLE [dbo].[BookRoom] WITH NOCHECK
    ADD FOREIGN KEY ([RoomNo]) REFERENCES [dbo].[Room] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BookRoom]...';


GO
ALTER TABLE [dbo].[BookRoom] WITH NOCHECK
    ADD FOREIGN KEY ([IDCustomer]) REFERENCES [dbo].[Customer] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BookRoom]...';


GO
ALTER TABLE [dbo].[BookRoom] WITH NOCHECK
    ADD FOREIGN KEY ([IDRoomType]) REFERENCES [dbo].[RoomType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room] WITH NOCHECK
    ADD FOREIGN KEY ([IDStatusBill]) REFERENCES [dbo].[StatusBill] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room] WITH NOCHECK
    ADD FOREIGN KEY ([StaffSetUp]) REFERENCES [dbo].[Staff] ([UserName]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room] WITH NOCHECK
    ADD FOREIGN KEY ([ServiceId]) REFERENCES [dbo].[Service] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ChargeService2Room]...';


GO
ALTER TABLE [dbo].[ChargeService2Room] WITH NOCHECK
    ADD FOREIGN KEY ([IDReservationId]) REFERENCES [dbo].[BookRoom] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CheckOutRoom]...';


GO
ALTER TABLE [dbo].[CheckOutRoom] WITH NOCHECK
    ADD FOREIGN KEY ([IDBookRoom]) REFERENCES [dbo].[BookRoom] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CheckOutRoom]...';


GO
ALTER TABLE [dbo].[CheckOutRoom] WITH NOCHECK
    ADD FOREIGN KEY ([IDRoom]) REFERENCES [dbo].[Room] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CheckOutRoomDetails]...';


GO
ALTER TABLE [dbo].[CheckOutRoomDetails] WITH NOCHECK
    ADD FOREIGN KEY ([IDCustomerOther]) REFERENCES [dbo].[Customer] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CheckOutRoomDetails]...';


GO
ALTER TABLE [dbo].[CheckOutRoomDetails] WITH NOCHECK
    ADD FOREIGN KEY ([IDReceiveRoom]) REFERENCES [dbo].[CheckOutRoom] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Customer]...';


GO
ALTER TABLE [dbo].[Customer] WITH NOCHECK
    ADD FOREIGN KEY ([IDCustomerType]) REFERENCES [dbo].[CustomerType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Payments]...';


GO
ALTER TABLE [dbo].[Payments] WITH NOCHECK
    ADD FOREIGN KEY ([BillID]) REFERENCES [dbo].[Bill] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[REPORT]...';


GO
ALTER TABLE [dbo].[REPORT] WITH NOCHECK
    ADD FOREIGN KEY ([idRoomType]) REFERENCES [dbo].[RoomType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Room]...';


GO
ALTER TABLE [dbo].[Room] WITH NOCHECK
    ADD FOREIGN KEY ([IDRoomType]) REFERENCES [dbo].[RoomType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Room]...';


GO
ALTER TABLE [dbo].[Room] WITH NOCHECK
    ADD FOREIGN KEY ([IDStatusRoom]) REFERENCES [dbo].[StatusRoom] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Service]...';


GO
ALTER TABLE [dbo].[Service] WITH NOCHECK
    ADD FOREIGN KEY ([IDServiceType]) REFERENCES [dbo].[ServiceType] ([ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Staff]...';


GO
ALTER TABLE [dbo].[Staff] WITH NOCHECK
    ADD FOREIGN KEY ([IDStaffType]) REFERENCES [dbo].[StaffType] ([ID]);


GO
PRINT N'Creating Function [dbo].[ConvertString]...';


GO
CREATE FUNCTION [dbo].[ConvertString] ( @strInput NVARCHAR(4000) ) RETURNS NVARCHAR(4000) AS BEGIN IF @strInput IS NULL RETURN @strInput IF @strInput = '' RETURN @strInput DECLARE @RT NVARCHAR(4000) DECLARE @SIGN_CHARS NCHAR(136) DECLARE @UNSIGN_CHARS NCHAR (136) SET @SIGN_CHARS = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệế ìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵý ĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍ ÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ' +NCHAR(272)+ NCHAR(208) SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeee iiiiiooooooooooooooouuuuuuuuuuyyyyy AADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIII OOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD' DECLARE @COUNTER int DECLARE @COUNTER1 int SET @COUNTER = 1 WHILE (@COUNTER <=LEN(@strInput)) BEGIN SET @COUNTER1 = 1 WHILE (@COUNTER1 <=LEN(@SIGN_CHARS)+1) BEGIN IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1)) = UNICODE(SUBSTRING(@strInput,@COUNTER ,1) ) BEGIN IF @COUNTER=1 SET @strInput = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)-1) ELSE SET @strInput = SUBSTRING(@strInput, 1, @COUNTER-1) +SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)- @COUNTER) BREAK END SET @COUNTER1 = @COUNTER1 +1 END SET @COUNTER = @COUNTER +1 END SET @strInput = replace(@strInput,' ','-') RETURN @strInput END
GO
PRINT N'Creating Procedure [dbo].[GetCheckedOutRoomByCompanyOpenForBilling]...';


GO
CREATE PROCEDURE GetCheckedOutRoomByCompanyOpenForBilling @companyId int
AS
Select r.ID As ID, r.Name, R.IDRoomType ,r.IDStatusRoom, br.ID as [BookingId],br.DateCheckIn as [Check-in Date], cr.CheckOutDate as [Checked Out Date], br.IDCustomer as CustomerId, b.RoomPrice as [RoomTotal], br.PriceChargedPerNight as [PriceChargedPerNight], br.BookingType as [BookingType]
	from CheckOutRoom cr, BookRoom br, Bill b, Room r 
	where cr.CheckOutDate is not null and r.ID = br.RoomNo and
	cr.IDBookRoom = br.ID and cr.ID = b.IDReceiveRoom and b.IDStatusBill !=2
	and br.BookingType = 1 and br.IDCustomer = @companyId
GO
PRINT N'Creating Procedure [dbo].[GetCheckedOutRoomByCustomerOpenForBilling]...';


GO
CREATE PROCEDURE GetCheckedOutRoomByCustomerOpenForBilling  @customerId int
AS
Select r.ID As ID, r.Name, R.IDRoomType ,r.IDStatusRoom, br.ID as [BookingId],br.DateCheckIn as [Check-in Date], cr.CheckOutDate as [Checked Out Date],
br.IDCustomer as CustomerId, b.RoomPrice as [RoomTotal], br.PriceChargedPerNight as [PriceChargedPerNight], br.BookingType as [BookingType]
	from CheckOutRoom cr, BookRoom br, Bill b, Room r	
	where cr.CheckOutDate is not null and r.ID = br.RoomNo and
	cr.IDBookRoom = br.ID and cr.ID = b.IDReceiveRoom and b.IDStatusBill !=2
	and br.IDCustomer = @customerId
GO
PRINT N'Creating Procedure [dbo].[GetCheckedOutRoomsOpenForBilling]...';


GO
CREATE PROCEDURE [dbo].GetCheckedOutRoomsOpenForBilling	
AS
	Select r.ID As ID, r.Name, R.IDRoomType ,r.IDStatusRoom, br.ID as [BookingId],br.DateCheckIn as [Check-in Date], cr.CheckOutDate as [Checked Out Date],
	br.IDCustomer as CustomerId, b.RoomPrice as [RoomTotal], br.PriceChargedPerNight as [PriceChargedPerNight], br.BookingType as [BookingType]
	from CheckOutRoom cr, BookRoom br, Bill b, Room r	
	where cr.CheckOutDate is not null and r.ID = br.RoomNo and
	cr.IDBookRoom = br.ID and cr.Id = b.IDReceiveRoom and b.IDStatusBill !=2
GO
PRINT N'Creating Procedure [dbo].[GetIDReceiveRoomCurrent]...';


GO
CREATE proc [dbo].[GetIDReceiveRoomCurrent]
as
begin
	select MAX(id)
	from CheckOutRoom
end
GO
PRINT N'Creating Procedure [dbo].[InsertReceiveRoom]...';


GO
CREATE proc [dbo].[InsertReceiveRoom]
@idBookRoom int,@idRoom int, @checkOutDate Date, @userName nvarchar(20)
as
begin
	insert into CheckOutRoom(IDBookRoom,IDRoom, CheckOutDate)
	values(@idBookRoom,@idRoom, @checkOutDate)
	update Room
	set IDStatusRoom=1
	where ID=@idRoom
	
	insert into HCheckOutRoom(IDBookRoom, IDRoom, CheckOutDate, ChangedDate, UserID)
	values(@idBookRoom, @idRoom, @checkOutDate, GETDATE(), @userName)
end
GO
PRINT N'Creating Procedure [dbo].[InsertReceiveRoomDetails]...';


GO
CREATE proc [dbo].[InsertReceiveRoomDetails]
@idReceiveRoom int,@idCustomer int
as
begin
	insert into CheckOutRoomDetails(IDReceiveRoom,IDCustomerOther)
	values(@idReceiveRoom,@idCustomer)
end
GO
PRINT N'Creating Procedure [dbo].[LoadBookedRoomsForCustomerByNameAndID]...';


GO
CREATE PROCEDURE [dbo].[LoadBookedRoomsForCustomerByNameAndID]
@name nvarchar(100),
@cnic nvarchar(100)
as
begin
SELECT 
    R.Name AS RoomName,
    RT.Name AS RoomTypeName,
    R.ID AS RoomId,
    BR.ID AS BookingId,
    BR.DateCheckIn AS [Check-in Date],
    BR.DateCheckOut AS [Check out Date],
    BR.DateBookRoom AS [Booking Date],
    BR.PriceChargedPerNight AS Price,
    C.Name AS CustomerName,
    C.ID AS CustomerID,
    BR.BookingType AS BookingType
FROM 
    BookRoom BR
JOIN 
    Room R ON BR.RoomNo = R.ID
JOIN 
    RoomType RT ON R.IDRoomType = RT.ID
JOIN 
    Customer C ON C.ID = BR.IDCustomer
WHERE 
    C.IDCard = @cnic
    AND C.Name = @name
    AND NOT EXISTS (
        SELECT 1
        FROM CheckoutRoom CR
        WHERE CR.IDBookRoom = BR.ID
    );
end
GO
PRINT N'Creating Procedure [dbo].[Procedure]...';


GO
CREATE PROCEDURE [dbo].[Procedure]
	@param1 int = 0,
	@param2 int
AS
	SELECT @param1, @param2
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[ShowBookRoomInfo]...';


GO
CREATE proc [dbo].[ShowBookRoomInfo]
@idBookRoom int
as
begin

select R.Name as RoomName,RT.Name as RoomTypeName, R.ID  as RoomId,BR.ID as BookingId, BR.DateCheckIn as [Check-in Date], BR.DateCheckOut as [Check out Date], BR.DateBookRoom[Booking Date],BR.PriceChargedPerNight as Price, C.Name as CustomerName, 
C.ID as CustomerID, BR.BookingType as BookingType
from BookRoom BR, Room R, RoomType RT, Customer C
where BR.RoomNo = R.ID and R.IDRoomType = RT.ID and C.ID = BR.IDCustomer 
and BR.ID=@idBookRoom
AND NOT EXISTS (
        SELECT 1
        FROM CheckoutRoom CR
        WHERE CR.IDBookRoom = BR.ID
    );
end
GO
PRINT N'Creating Procedure [dbo].[ShowBookRoomInfoByRoomNameAndType]...';


GO
CREATE proc [dbo].[ShowBookRoomInfoByRoomNameAndType]
@roomName nvarchar(100),
@roomType nvarchar(100)
as
begin
SELECT 
    R.Name AS RoomName,
    RT.Name AS RoomTypeName,
	R.ID as RoomId,
	BR.ID as BookingId,
    BR.DateCheckIn AS [Check-in Date],
    BR.DateCheckOut AS [Check out Date],
    BR.DateBookRoom AS [Booking Date],
    BR.PriceChargedPerNight AS Price,
    C.Name AS CustomerName,
    C.ID AS CustomerID,
    BR.BookingType AS BookingType
FROM 
    BookRoom BR
JOIN 
    Room R ON BR.RoomNo = R.ID
JOIN 
    RoomType RT ON R.IDRoomType = RT.ID
JOIN 
    Customer C ON C.ID = BR.IDCustomer 
	WHERE 
	RT.Name = @roomType 
	AND R.Name = @roomName
    AND NOT EXISTS (
        SELECT 1
        FROM CheckoutRoom CR
        WHERE CR.IDBookRoom = BR.ID
    );
end
GO
PRINT N'Creating Procedure [dbo].[USP_ChekcAccess]...';


GO
CREATE PROC [dbo].[USP_ChekcAccess] 
@username NVARCHAR(100), @formname NVARCHAR(100)
AS
BEGIN
	SELECT UserName FROM dbo.Staff INNER JOIN dbo.StaffType ON StaffType.ID = Staff.IDStaffType 
	INNER JOIN AccessRights ON AccessRights.Idstafftype = stafftype.ID INNER JOIN job ON job.id = AccessRights.idjob
	WHERE UserName = @username AND @formname LIKE NameForm
END
GO
PRINT N'Creating Procedure [dbo].[USP_DeleteAccess]...';


GO
CREATE PROC [dbo].[USP_DeleteAccess]
@idJob INT, @idStaffType int
AS
BEGIN
	DELETE AccessRights WHERE @idJob = idjob AND @idStaffType = idStaffType
END
GO
PRINT N'Creating Procedure [dbo].[USP_DeleteBookRoom]...';


GO
create proc [dbo].[USP_DeleteBookRoom]
@id int
as
begin
	delete from BookRoom
	where ID=@id
end
GO
PRINT N'Creating Procedure [dbo].[USP_DeleteReceiveRoomDetails]...';


GO
CREATE proc [dbo].[USP_DeleteReceiveRoomDetails]
@idReceiveRoom int,@idCustomer int
as
begin
	delete from CheckOutRoomDetails
	where IDCustomerOther=@idCustomer and IDReceiveRoom=@idReceiveRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_DeleteStaffType]...';


GO
CREATE PROC [dbo].[USP_DeleteStaffType]
@id int
AS
begin
	DECLARE @count int = 0
	SELECT @count = COUNT(*) FROM staff WHERE @id = staff.IDStaffType
	IF(@count = 0)
	begin
		delete access where idstafftype = @id
		DELETE staffType WHERE @id = id
	end
END
GO
PRINT N'Creating Procedure [dbo].[USP_GetCharges2Room]...';


GO
CREATE proc [dbo].[USP_GetCharges2Room]
@idBookRoom int
as
begin

	select cr.ID as [ChargeId], IDReservationId as [Booking ID], StaffSetUp as [User], sr.Name as [Service Name], DateOfCreate as [Date Created], TotalPrice as [Price], Quantity as [Quantity]
	from ChargeService2Room cr, Service sr
	where @idBookRoom=cr.IDReservationId and sr.ID = cr.ServiceId
	and IDStatusBill != 2
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetCustomerTypeNameByIdCard]...';


GO
CREATE proc [dbo].[USP_GetCustomerTypeNameByIdCard]
@idCard nvarchar(100)
as
begin
	select B.Name
	from Customer A, CustomerType B
	where A.IDCustomerType=B.ID and A.IDCard=@idCard
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetIdBillFromIdRoom]...';


GO
CREATE proc [dbo].[USP_GetIdBillFromIdRoom]
@idRoom int
as
begin
	select B.*
	from CheckOutRoom A,Bill B
	where A.ID=B.IDReceiveRoom and B.IDStatusBill=1 and A.IDRoom=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetIdBillMax]...';


GO
create proc [dbo].[USP_GetIdBillMax]
as
select MAX(id)
from Bill
GO
PRINT N'Creating Procedure [dbo].[USP_GetIDCustomerFromBookRoom]...';


GO
CREATE proc [dbo].[USP_GetIDCustomerFromBookRoom]
@idReceiveRoom int
as
begin
	select B.IDCustomer
	from CheckOutRoom A,BookRoom B
	where A.ID=@idReceiveRoom and A.IDBookRoom=B.ID
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetIdReceiRoomFromIdRoom]...';


GO
CREATE proc [dbo].[USP_GetIdReceiRoomFromIdRoom]--IdRoom đưa vào có trạng thái "Có người"
@idRoom int
as
begin
select *
from CheckOutRoom
where IDRoom=@idRoom
order by ID desc
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetIdReceiveRoomFromIdRoom]...';


GO
CREATE proc [dbo].[USP_GetIdReceiveRoomFromIdRoom]
@idRoom int
as
begin
select *
from CheckOutRoom
where IDRoom=@idRoom
order by ID desc
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetIDRoomFromReceiveRoom]...';


GO
CREATE proc [dbo].[USP_GetIDRoomFromReceiveRoom]
@idReceiveRoom int
as
begin
	select IDRoom
	from CheckOutRoom
	where ID=@idReceiveRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetMaxPersonByRoomType]...';


GO
create proc [dbo].[USP_GetMaxPersonByRoomType]
@idRoomType int
as
begin
	if(@idRoomType=1)
	select *
	from Parameter
	where Name=N'QĐ1.1'

	if(@idRoomType=2)
	select *
	from Parameter
	where Name=N'QĐ1.2'

	if(@idRoomType=3)
	select *
	from Parameter
	where Name=N'QĐ1.3'

	if(@idRoomType=4)
	select *
	from Parameter
	where Name=N'QĐ1.4'
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetNameStaffTypeByUserName]...';


GO
create proc [dbo].[USP_GetNameStaffTypeByUserName]
@username nvarchar(100)
as
begin
	select B.*
	from Staff A, StaffType B
	where a.IDStaffType=B.ID and A.UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetPeople]...';


GO
CREATE proc [dbo].[USP_GetPeople]
@idBill int
as
begin
	select COUNT(B.IDReceiveRoom)
	from CheckOutRoom A,CheckOutRoomDetails B,Bill C
	where A.ID=C.IDReceiveRoom and A.ID=B.IDReceiveRoom and C.ID=@idBill
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetReceiveRoomsOpen]...';


GO
CREATE PROCEDURE [dbo].USP_GetReceiveRoomsOpen
	@param1 int = 0,
	@param2 int
AS
	SELECT * from Book
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[USP_GetRoomTypeByIdBookRoom]...';


GO
create proc [dbo].[USP_GetRoomTypeByIdBookRoom]
@idBookRoom int
as
begin
	select B.*
	from BookRoom A, RoomType B
	where A.ID=@idBookRoom and A.IDRoomType=B.ID
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetRoomTypeByIdRoom]...';


GO
create proc [dbo].[USP_GetRoomTypeByIdRoom]
@idRoom int
as
begin
	select B.*
	from Room A,RoomType B
	where A.IDRoomType=B.ID and A.ID=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_GetStaffSetUp]...';


GO
create proc [dbo].[USP_GetStaffSetUp]
@idBill int
as
begin
	select B.*
	from Bill A, Staff B
	where A.ID=@idBill and A.StaffSetUp=B.UserName
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertAccess]...';


GO
CREATE PROC [dbo].[USP_InsertAccess]
@idJob INT, @idStaffType int
AS
BEGIN
	INSERT INTO AccessRights(idjob, idstafftype) VALUES(@idJob, @idStaffType)
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertBill]...';


GO
--CREATE proc [dbo].[USP_InsertBill]
--@idReceiveRoom int,@staffSetUp nvarchar(100),  @roomPrice int
--as
--begin
--	insert into Bill(IDReceiveRoom,StaffSetUp, RoomPrice)
--	values(@idReceiveRoom,@staffSetUp, @roomPrice)
--end

CREATE PROC [dbo].[USP_InsertBill]
    @bookingId INT,
    @staffSetUp NVARCHAR(100),  
    @roomPrice INT
AS
BEGIN
    -- Declare a variable to hold the total service charge
    DECLARE @totalServiceCharge INT;

    -- Retrieve BookingID from the CheckOutRoom table using @idReceiveRoom
    DECLARE @idReceiveRoom INT;
    SELECT @idReceiveRoom = cr.ID
    FROM CheckOutRoom cr
    WHERE cr.IDBookRoom = @bookingId
    -- Calculate the total of all services used by the room
    SELECT @totalServiceCharge = SUM(CSR.TotalPrice)
    FROM ChargeService2Room CSR
    WHERE CSR.IDReservationId = @bookingID

    -- Handle case where no services were found
    IF @totalServiceCharge IS NULL
    BEGIN
        SET @totalServiceCharge = 0;
    END    
    -- Insert into Bill table including the total service charge
    INSERT INTO Bill(IDReceiveRoom, StaffSetUp, RoomPrice, ServicePrice, TotalPrice)
    VALUES(@idReceiveRoom, @staffSetUp, @roomPrice, @totalServiceCharge, (@roomPrice + @totalServiceCharge));
end;
GO
PRINT N'Creating Procedure [dbo].[USP_InsertBillDetails]...';


GO
CREATE proc [dbo].[USP_InsertBillDetails]
@idBill int,@idService int,@count int
as
begin
		declare @totalPrice int,@price int
		select @price=Price
		from Service
		where ID=@idService
		set @totalPrice=@price*@count
		insert into BillDetails(IDBill,IDService,Count,TotalPrice)
		values(@idBill,@idService,@count,@totalPrice)
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertCompany]...';


GO
CREATE PROC [dbo].[USP_InsertCompany]
@companyName NVARCHAR(100), @phone NVARCHAR(200), @address nvarchar(200), @email nvarchar(100), @repPhone nvarchar(200),@repId NVARCHAR(100),
@repName NVARCHAR(100)
AS
BEGIN

INSERT INTO dbo.Company(name,address, [email], phone, repName, repId, repContactNumber)
	VALUES(@companyName, @address, @email, @phone, @repName, @repId, @repPhone)

SELECT max(id) FROM Company as Id
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertCustomer]...';


GO
CREATE PROC [dbo].[USP_InsertCustomer]
@customerName NVARCHAR(100), @idCustomerType int, @idCard NVARCHAR(100),
@address NVARCHAR(200), @dateOfBirth date, @phoneNumber nvarchar(100), @email nvarchar(200), @city nvarchar(200),
@sex NVARCHAR(100), @nationality NVARCHAR(100), @refCompany int
AS
BEGIN
DECLARE @count INT =0
SELECT @count = COUNT(*) FROM customer WHERE IDCard = @idCard
IF(@count=0)
INSERT INTO dbo.Customer(IDCard,IDCustomerType, Name, DateOfBirth, Address, PhoneNumber, email, city, Sex, Nationality, RefCompany)
	VALUES(@idCard, @idCustomerType, @customerName, @dateOfBirth, @address, @phoneNumber, @email, @city, @sex, @nationality, @refCompany)
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertCustomer_]...';


GO
CREATE proc [dbo].[USP_InsertCustomer_]
@idCard nvarchar(100),@name nvarchar(100),@idCustomerType int, @dateOfBirth Date,@address nvarchar(200),@phoneNumber nvarchar(100),@email nvarchar(200),@city
nvarchar(200),
@sex nvarchar(100),@nationality nvarchar(100), @refCompany int
as
begin
	insert into Customer(IDCard,Name,IDCustomerType,DateOfBirth,Address,PhoneNumber,email,City,Sex,Nationality, RefCompany)
	values(@idCard,@name,@idCustomerType,@dateOfBirth,@address,@phoneNumber,@email,@city,@sex,@nationality, @refCompany)
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertHBookRoom]...';


GO
CREATE proc [dbo].[USP_InsertHBookRoom]
@roomId int, @idCustomer int,@idRoomType int,@bookingType int,@datecheckin date,@datecheckout date,@datebookroom smalldatetime, @priceChargedPerNight int, @userId nvarchar(20)
as
begin
	insert into HBookRoom (RoomNo, IDCustomer,IDRoomType, BookingType,DateCheckIn,DateCheckOut,DateBookRoom, PriceChargedPerNight, UserID)
	values(@roomId, @idCustomer,@idRoomType, @bookingType,@datecheckin,@datecheckout,@datebookroom, @priceChargedPerNight, @userId)
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertPayment]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertPayment]
    @BookingID INT,
    @PaymentDate Date,
    @PaymentMode NVARCHAR(200),
    @AmountPaid INT
AS
BEGIN
    -- Declare a variable to hold the BillID
    DECLARE @BillID INT;

    -- Begin a transaction
    BEGIN TRANSACTION;

    -- Try block
    BEGIN TRY
        -- Retrieve the CheckoutID from the CheckOutRoom table
        DECLARE @CheckoutID INT;
        SELECT @CheckoutID = ID
        FROM CheckOutRoom
        WHERE IDBookRoom = @BookingID;

        -- Retrieve the BillID from the Bill table
        SELECT @BillID = ID
        FROM Bill
        WHERE IDReceiveRoom = @CheckoutID;

        -- Insert the new payment record
        INSERT INTO [dbo].[Payments] (BillID, PaymentDate, PaymentMode, AmountPaid)
        VALUES (@BillID, @PaymentDate, @PaymentMode, @AmountPaid);

        -- Commit the transaction
        COMMIT TRANSACTION;
    END TRY

    -- Catch block
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

        -- Raise the error to the caller
        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertReport]...';


GO
CREATE Proc [dbo].[USP_InsertReport]
@idBill int
AS
BEGIN
	DECLARE @month INT = 0
	DECLARE @year INT = 0
	DECLARE @id INT = 0
	DECLARE @price INT = 0
	SELECT @id = dbo.ROOM.IDRoomType, @month = MONTH(bill.DateOfCreate), @year = YEAR(bill.DateOfCreate), @price = bill.TotalPrice
	FROM bill INNER JOIN dbo.RECEIVEROOM ON RECEIVEROOM.ID = bill.IDReceiveRoom 
		INNER JOIN dbo.ROOM ON ROOM.ID = RECEIVEROOM.IDRoom
	WHERE bill.ID = @idBill

	DECLARE @count INT = 0	
	SELECT @count = COUNT(*) FROM report WHERE month = @month AND year = @year and idRoomType = @id
	IF(@count=0) -- khong ton tai roomtype
    BEGIN
		
		INSERT INTO report(idRoomType, Month, Year) SELECT roomtype.ID, @month, @year FROM roomtype 
	END
    UPDATE dbo.REPORT SET value = value + @price WHERE Year = @year AND Month = @month AND idRoomType = @id
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertRoom]...';


GO
CREATE PROC [dbo].[USP_InsertRoom]
@nameRoom NVARCHAR(100), @idRoomType INT, @idStatusRoom INT
AS
INSERT INTO dbo.Room(Name, IDRoomType, IDStatusRoom)
VALUES(@nameRoom, @idRoomType, @idStatusRoom)
GO
PRINT N'Creating Procedure [dbo].[USP_InsertService]...';


GO
CREATE PROC [dbo].[USP_InsertService]
@name NVARCHAR(200), @idServiceType INT, @price int
AS
BEGIN
	INSERT INTO dbo.Service(Name,IDServiceType,Price)
	VALUES(@name, @idServiceType, @price)
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertServiceCharge2Room]...';


GO
CREATE PROC [dbo].USP_InsertServiceCharge2Room
@idBookRoom int, @serviceId int, @staff nvarchar(100), @totalPrice int, @quantity int 
AS
BEGIN

INSERT INTO dbo.ChargeService2Room(IDReservationId,ServiceId, StaffSetUp, TotalPrice, DateOfCreate, Quantity)
	VALUES(@idBookRoom, @serviceId, @staff, @totalPrice, GETDATE(), @quantity)

end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertServiceType]...';


GO
CREATE PROC [dbo].[USP_InsertServiceType]
@name NVARCHAR(100)
AS
BEGIN
	INSERT INTO dbo.ServiceType(name)
	VALUES(@name)
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertStaff]...';


GO
CREATE PROC [dbo].[USP_InsertStaff]
@user NVARCHAR(100), @name NVARCHAR(100), @pass NVARCHAR(100),
@idStaffType INT,@idCard NVARCHAR(100), @dateOfBirth DATE, @sex NVARCHAR(100),
@address NVARCHAR(200), @phoneNumber INT, @startDay date
AS
BEGIN
	DECLARE @count INT =0
	SELECT @count = COUNT(*) FROM dbo.Staff WHERE UserName = @user OR IDCard = @idCard
	IF(@count >0) RETURN
	INSERT INTO dbo.Staff(UserName, DisplayName, PassWord, IDStaffType, IDCard, DateOfBirth, Sex, Address, PhoneNumber, StartDay)
	VALUES (@user, @name, @pass, @idStaffType,@idCard, @dateOfBirth, @sex, @address, @phoneNumber, @startDay)
END
GO
PRINT N'Creating Procedure [dbo].[USP_InsertStaffType]...';


GO
CREATE PROC [dbo].[USP_InsertStaffType] 
@name NVARCHAR(100)
AS
BEGIN
    INSERT INTO staffType(Name) VALUES(@name)
END
GO
PRINT N'Creating Procedure [dbo].[USP_IsExistBillDetailsOfRoom]...';


GO
CREATE Proc [dbo].[USP_IsExistBillDetailsOfRoom]--Kq > 0 :TH3, ngược lại TH2. Tuy nhiên, trước khi kt đk này phải chắc chắn tồn tại Bill
@idRoom int,@idservice int
as
begin
	select *
	from Bill A,BillDetails B,CheckOutRoom C
	where A.IDStatusBill=1 and A.ID=B.IDBill and C.ID=A.IDReceiveRoom and C.IDRoom=@idRoom and B.IDService=@idservice
end
GO
PRINT N'Creating Procedure [dbo].[USP_IsExistBillOfRoom]...';


GO
CREATE proc [dbo].[USP_IsExistBillOfRoom]--Trả về count > 0: tức là đã tồn tại Bill
@idRoom int
as
begin
	select *
	from Bill A,CheckOutRoom B
	where A.IDStatusBill=1 and A.IDReceiveRoom=B.ID and B.IDRoom=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_IsIDBookRoomExists]...';


GO
CREATE proc [dbo].[USP_IsIDBookRoomExists]
@idBookRoom int
as
begin
	select *
	from BookRoom 
	where ID=@idBookRoom and ID not in
	(
		select IDBookRoom
		from CheckOutRoom
	)
end
GO
PRINT N'Creating Procedure [dbo].[USP_IsIdCardExists]...';


GO
CREATE proc [dbo].[USP_IsIdCardExists]
@idCard nvarchar(100)
as
begin
select *
from Customer
where IDCard=@idCard
end
GO
PRINT N'Creating Procedure [dbo].[USP_IsIdCardExistsAcc]...';


GO
create proc [dbo].[USP_IsIdCardExistsAcc]
@idCard nvarchar(100)
as
begin
	select *
	from Staff
	where IDCard=@idCard
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadAllBookedRooms]...';


GO
CREATE proc [dbo].[USP_LoadAllBookedRooms]
as
begin
	select A.ID[Id], b.Name[Customer Name],b.IDCard[CNIC],C.Name[Room Type],A.DateCheckIn[Check-In date],A.DateCheckOut[Check out date],a.DateBookRoom as [DateBookRoom],d.ID as [RoomNo], D.Name as [RoomName], D.IDRoomType as [RoomType]
	from BookRoom A,Customer B, RoomType C, Room D
	where a.IDRoomType=c.ID and A.IDCustomer=B.ID
	and a.RoomNo = D.Id
	and D.IDStatusRoom = 2
	order by A.DateBookRoom desc
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadBookRoomsByDate]...';


GO
CREATE proc [dbo].[USP_LoadBookRoomsByDate]
@date Date
as
begin
	select A.ID[Id], b.Name[Customer Name],b.IDCard[CNIC],C.Name[Room Type],A.DateCheckIn[Check-In date],A.DateCheckOut[Check out date]
	from BookRoom A,Customer B, RoomType C
	where a.IDRoomType=c.ID and A.IDCustomer=B.ID and A.DateBookRoom>=@date
	order by A.DateBookRoom desc
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadEmptyRoom]...';


GO
CREATE proc [dbo].[USP_LoadEmptyRoom]
@idRoomType int
as
begin
	select *
	from Room
	where IDStatusRoom=1 and IDRoomType=@idRoomType
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullAccessNow]...';


GO
CREATE PROC [dbo].[USP_LoadFullAccessNow]
@idStaffType INT
AS
BEGIN
	SELECT Job.Name, job.ID FROM job INNER JOIN AccessRights ON job.Id = AccessRights.IDJob
	WHERE @idStaffType = dbo.AccessRights.IDStaffType
END
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullAccessRest]...';


GO
CREATE PROC [dbo].[USP_LoadFullAccessRest]
@idStaffType INT
AS
BEGIN
	SELECT j.Name, j.Id FROM job j
	WHERE NOT EXISTS 
	(
		SELECT * FROM job INNER JOIN AccessRights ON job.Id = AccessRights.IdJob
		WHERE j.Id = job.Id AND AccessRights.idStaffType = @idStaffType
	)
END
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullBill]...';


GO
CREATE PROC [dbo].[USP_LoadFullBill] 
AS
BEGIN
	SELECT Bill.ID, Room.Name AS [roomName], BookingType as BookingType, StaffSetUp, DateOfCreate, StatusBill.Name, TotalPrice, AmountPaid as AmountPaid,IDCustomer as [CustomerID]
    FROM dbo.Bill INNER JOIN dbo.CheckOutRoom ON CheckOutRoom.ID = Bill.IDReceiveRoom
					INNER JOIN dbo.StatusBill ON StatusBill.ID = Bill.IDStatusBill
					INNER JOIN dbo.Room ON Room.ID = CheckOutRoom.IDRoom
					inner join BookRoom on BookRoom.ID = CheckOutRoom.IDBookRoom
	ORDER BY DateOfCreate DESC
END
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullCompany]...';


GO
CREATE PROC [dbo].[USP_LoadFullCompany]
AS
SELECT Id, name, c.email, c.phone, c.repContactNumber, c.repId, c.repName, c.address
FROM dbo.Company c
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullCustomer]...';


GO
CREATE PROC [dbo].[USP_LoadFullCustomer]
AS
SELECT CUSTOMER.ID, Customer.Name, IDCard, CustomerType.Name as [NameCustomerType], Sex, DateOfBirth, PhoneNumber, email, city, Address, Nationality, IDCustomerType 
FROM dbo.Customer INNER JOIN dbo.CustomerType ON CustomerType.ID = Customer.IDCustomerType
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullCustomerType]...';


GO
--------------------------------------------------------------
--Customer Type
--------------------------------------------------------------

CREATE PROC [dbo].[USP_LoadFullCustomerType]
AS
SELECT * FROM dbo.CustomerType
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullParameter]...';


GO
CREATE PROC [dbo].[USP_LoadFullParameter]
AS
SELECT * FROM dbo.PARAMETER
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullReport]...';


GO
CREATE PROC [dbo].[USP_LoadFullReport]
@month INT, @year int
AS
BEGIN
	SELECT name, value, rate FROM dbo.REPORT INNER JOIN dbo.ROOMTYPE ON ROOMTYPE.ID = REPORT.idRoomType
	WHERE Month = @month AND Year = @year
END
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullRoom]...';


GO
CREATE PROC [dbo].[USP_LoadFullRoom]
AS
SELECT Room.ID, Room.Name,RoomType.Name AS [nameRoomType], Price, LimitPerson,
StatusRoom.Name AS [nameStatusRoom], IDRoomType, IDStatusRoom
FROM dbo.Room INNER JOIN dbo.RoomType 
ON roomtype.id = room.IDRoomType
INNER JOIN dbo.StatusRoom ON statusroom.id = room.IDStatusRoom
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullRoomType]...';


GO
CREATE PROC [dbo].[USP_LoadFullRoomType]
AS
SELECT * FROM dbo.RoomType
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullService]...';


GO
CREATE PROC [dbo].[USP_LoadFullService]
AS
SELECT Service.ID, Service.Name, Price, ServiceType.Name AS [nameServiceType], IDServiceType
FROM dbo.Service INNER JOIN dbo.ServiceType ON ServiceType.ID = Service.IDServiceType
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullServiceType]...';


GO
CREATE PROC [dbo].[USP_LoadFullServiceType]
AS
SELECT * FROM ServiceType
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullStaff]...';


GO
CREATE PROC [dbo].[USP_LoadFullStaff]
AS
BEGIN
	SELECT UserName, DisplayName, Name, IDCard,
			DateOfBirth, Sex, PhoneNumber, StartDay, Address, IDStaffType
    FROM dbo.Staff INNER JOIN dbo.StaffType ON StaffType.ID = Staff.IDStaffType
END
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullStaffType]...';


GO
------------------------------------------------------------
--Staff type
--------------------------------------------------------------

CREATE PROC [dbo].[USP_LoadFullStaffType]
AS
begin
SELECT * FROM dbo.StaffType
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadFullStatusRoom]...';


GO
--------------------------------------------------------------

--Status Room
--------------------------------------------------------------
CREATE PROC [dbo].[USP_LoadFullStatusRoom]
AS
SELECT * FROM dbo.StatusRoom
GO
PRINT N'Creating Procedure [dbo].[USP_LoadListFullRoom]...';


GO
CREATE proc [dbo].[USP_LoadListFullRoom]
@getToday Date
as
begin
	select distinct A.*, B.ID as BookingID
	from Room A, BookRoom B
	where A.IDStatusRoom=2 and A.ID=B.RoomNo 
	order by A.ID asc
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadReceiveRoomsByDate]...';


GO
CREATE proc [dbo].[USP_LoadReceiveRoomsByDate]
@date Date
as
begin
	select A.ID[Id], b.Name[Customer Name],b.IDCard[CNIC],C.Name[Room Name],D.DateCheckIn[Check-in date],D.DateCheckOut[Check out date], A.CheckOutDate as ActualCheckOutDate
	from CheckOutRoom A,Customer B, Room C,BookRoom D
	where A.IDBookRoom=D.ID and D.IDCustomer=B.ID and A.IDRoom=C.ID and D.DateCheckIn>=@date
	order by A.ID desc
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadServiceByServiceType]...';


GO
create proc [dbo].[USP_LoadServiceByServiceType]
@idServiceType int
as
begin
	select *
	from Service
	where IDServiceType=@idServiceType
end
GO
PRINT N'Creating Procedure [dbo].[USP_LoadStaffInforByUserName]...';


GO
create proc [dbo].[USP_LoadStaffInforByUserName]
@username nvarchar(100)
as
begin
	select *
	from Staff
	where UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_Login]...';


GO
create proc [dbo].[USP_Login]
@userName nvarchar(100),@passWord nvarchar(100)
as
Select * from Staff where UserName=@userName and PassWord=@passWord
GO
PRINT N'Creating Procedure [dbo].[USP_RoomTypeInfo]...';


GO
create proc [dbo].[USP_RoomTypeInfo]
@id int
as
begin
select * 
from RoomType
where ID=@id
end
GO
PRINT N'Creating Procedure [dbo].[USP_SearchBill]...';


GO
CREATE PROC [dbo].[USP_SearchBill]
@string NVARCHAR(100), @mode int
AS
BEGIN
	SELECT @string = '%' + [dbo].[ConvertString](@string) + '%'
	DECLARE @table TABLE(id int)
	IF(@mode = 0)
		INSERT INTO @table SELECT bill.id FROM bill WHERE CAST(id AS NVARCHAR(100)) LIKE @string
	ELSE IF(@mode = 1)
		INSERT INTO @table SELECT bill.id  FROM bill INNER JOIN dbo.ReceiveRoom ON ReceiveRoom.ID = Bill.IDReceiveRoom
		INNER JOIN dbo.BookRoom ON BookRoom.ID = ReceiveRoom.IDBookRoom INNER JOIN dbo.Customer ON Customer.ID = BookRoom.IDCustomer 
		WHERE [dbo].ConvertString(Customer.Name) LIKE @string
	ELSE IF(@mode = 2)
		INSERT INTO @table SELECT bill.id  FROM bill INNER JOIN dbo.ReceiveRoom ON ReceiveRoom.ID = Bill.IDReceiveRoom
		INNER JOIN dbo.BookRoom ON BookRoom.ID = ReceiveRoom.IDBookRoom INNER JOIN dbo.Customer ON Customer.ID = BookRoom.IDCustomer
		WHERE [dbo].ConvertString(Customer.IDCard) LIKE @string
	ELSE IF(@mode = 3)
		INSERT INTO @table SELECT bill.id  FROM bill INNER JOIN dbo.ReceiveRoom ON ReceiveRoom.ID = Bill.IDReceiveRoom
		INNER JOIN dbo.BookRoom ON BookRoom.ID = ReceiveRoom.IDBookRoom INNER JOIN dbo.Customer ON Customer.ID = BookRoom.IDCustomer
		WHERE CAST(dbo.Customer.PhoneNumber AS NVARCHAR(100)) LIKE @string

	SELECT bill.id, room.Name AS [roomName], Customer.Name as [customerName], bill.StaffSetUp, bill.DateOfCreate, STATUSBILL.Name, bill.TotalPrice, (cast(bill.Discount as nvarchar(4)) + '%') [Discount], cast(bill.TotalPrice*( (100-bill.Discount)/100.0) as int) [FinalPrice]
    FROM dbo.BILL INNER JOIN dbo.RECEIVEROOM ON RECEIVEROOM.ID = BILL.IDReceiveRoom 
	INNER JOIN dbo.STATUSBILL ON STATUSBILL.id = bill.IDStatusBill 
	INNER JOIN dbo.ROOM ON ROOM.ID = RECEIVEROOM.IDRoom
	INNER JOIN @table ON bill.id = [@table].id
	inner join bookroom on bookroom.id = RECEIVEROOM.IDBookRoom
	inner join Customer on Customer.ID = BookRoom.IDCustomer
	ORDER BY DateOfCreate DESC
END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchCompany]...';


GO
	CREATE PROC [dbo].[USP_SearchCompany]
	@string NVARCHAR(100)
	AS
	BEGIN
		SELECT * FROM Company where name = @string
	END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchCustomer]...';


GO
	CREATE PROC [dbo].[USP_SearchCustomer]
	@string NVARCHAR(100), @mode INT
	AS
	BEGIN
		SELECT @string = '%' + [dbo].[ConvertString](@string) + '%'
		DECLARE @table TABLE(id INT)

		IF(@mode = 0)
			INSERT INTO @table SELECT id FROM [dbo].customer WHERE CAST(id AS NVARCHAR(100)) LIKE @string;
		ELSE IF(@mode = 1)
			INSERT INTO @table SELECT id FROM [dbo].customer WHERE [dbo].[ConvertString](name) LIKE @string;
		ELSE IF(@mode = 2)
			INSERT INTO @table SELECT id FROM [dbo].customer WHERE [dbo].[ConvertString](IDCard) LIKE @string;
		ELSE IF(@mode = 3)
			INSERT INTO @table SELECT id FROM [dbo].customer WHERE CAST(PhoneNumber AS NVARCHAR(100)) LIKE @string;

	    SELECT CUSTOMER.ID, Customer.Name, IDCard, CustomerType.Name as [NameCustomerType], Sex, DateOfBirth, PhoneNumber, Address, Nationality, IDCustomerType
		FROM Customer INNER JOIN @table ON [@table].id = CUSTOMER.ID INNER JOIN dbo.CustomerType ON CustomerType.ID = Customer.IDCustomerType
	END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchParameter]...';


GO
--------------------------------------------------------------
--parameter
--------------------------------------------------------------
CREATE PROC [dbo].[USP_SearchParameter]
@string NVARCHAR(200)
AS
BEGIN
	SELECT @string = '%' + [dbo].[convertstring](@string) + '%'
	SELECT * FROM dbo.PARAMETER
	WHERE [dbo].[convertstring](name) like @string
END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchRoom]...';


GO
--------------------------------------------------------------

--Room
--------------------------------------------------------------
CREATE PROC [dbo].[USP_SearchRoom]
@string NVARCHAR(100), @int INT
AS
BEGIN
	SELECT @string = '%' + [dbo].[convertString](@string) + '%'
	SELECT Room.ID, Room.Name,RoomType.Name AS [nameRoomType], Price, LimitPerson,
	StatusRoom.Name AS [nameStatusRoom], IDRoomType, IDStatusRoom
	FROM dbo.Room INNER JOIN dbo.RoomType ON roomtype.id = room.IDRoomType INNER JOIN dbo.StatusRoom ON statusroom.id = room.IDStatusRoom
	WHERE dbo.ConvertString(dbo.Room.name) LIKE @string OR dbo.Room.id = @int
END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchRoomType]...';


GO
--------------------------------------------------------------

--Room Type
--------------------------------------------------------------
CREATE PROC [dbo].[USP_SearchRoomType]
@string NVARCHAR(100), @int INT
AS
BEGIN
	SELECT @string = '%' + [dbo].[convertstring](@string) + '%'
	SELECT * FROM dbo.ROOMTYPE
	WHERE [dbo].[convertstring](name) LIKE @string OR id = @int
end
GO
PRINT N'Creating Procedure [dbo].[USP_SearchService]...';


GO
CREATE PROC [dbo].[USP_SearchService]
@string NVARCHAR(100), @int int
AS
BEGIN
		DECLARE @table TABLE
		(
			id INT
		)
		SELECT @string = '%' + [dbo].[ConvertString](@string) + '%'
		INSERT INTO @table
			SELECT id FROM dbo.SERVICE WHERE [dbo].[ConvertString](name) like @string OR id = @int
		SELECT Service.ID, Service.Name, Price, ServiceType.Name AS [nameServiceType], IDServiceType
		FROM @table INNER JOIN dbo.SERVICE ON SERVICE.ID = [@table].id INNER JOIN dbo.ServiceType ON ServiceType.ID = Service.IDServiceType
END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchServiceType]...';


GO
---------------------------

--------------------------------------------------------------

--Service Type
--------------------------------------------------------------
CREATE PROC [dbo].[USP_SearchServiceType]
@string NVARCHAR(100), @int INT
AS
BEGIN
	DECLARE @table table( id int)
	SELECT @string ='%' + [dbo].[ConvertString](@string) + '%'
	INSERT INTO @table SELECT id FROM ServiceType WHERE [dbo].[ConvertString](name) LIKE @string OR id = @int
	SELECT dbo.SERVICETYPE.ID, Name FROM @table INNER JOIN servicetype ON  SERVICETYPE.ID = [@table].id
END
GO
PRINT N'Creating Procedure [dbo].[USP_SearchStaff]...';


GO
--------------------------------------------------------------

--Staff 
--------------------------------------------------------------
CREATE PROC [dbo].[USP_SearchStaff]
@string NVARCHAR(100), @int int
AS
BEGIN
	SELECT @string = '%' + [dbo].[ConvertString](@string) + '%'
	DECLARE @table TABLE( username NVARCHAR(100))
	IF(@int < 1)
	begin
		INSERT INTO @table SELECT username FROM staff 
		WHERE username LIKE @string OR [dbo].[ConvertString](DisplayName) LIKE @string
		OR  idcard LIKE @string
	END
	ELSE
    BEGIN
		INSERT INTO @table SELECT username FROM staff 
		WHERE username LIKE @string OR [dbo].[ConvertString](DisplayName) LIKE @string
		OR  idcard LIKE @string OR cast(PhoneNumber AS NVARCHAR(100)) LIKE @string
	END
	SELECT Staff.UserName, DisplayName, Name, IDCard, DateOfBirth, Sex, PhoneNumber, StartDay, Address, IDStaffType
    FROM dbo.Staff INNER JOIN  @table ON [@table].username = STAFF.UserName INNER JOIN dbo.StaffType ON StaffType.ID = Staff.IDStaffType
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowBill]...';


GO
CREATE proc [dbo].[USP_ShowBill]
@idRoom int
as
begin
	select D.Name ServiceName,D.Price Price,B.Count Count,B.TotalPrice Total
	from Bill A, BillDetails B, CheckOutRoom C, Service D
	where A.IDStatusBill=1 and A.ID=b.IDBill and A.IDReceiveRoom=C.ID and C.IDRoom=@idRoom and B.IDService=D.ID
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowBillInfo]...';


GO
CREATE proc [dbo].[USP_ShowBillInfo]
@idBill int
as
begin
select D.Name[HoTen],D.IDCard[CMND],D.PhoneNumber[SDT],E.Name[LoaiKH],D.Address[DiaChi],D.Nationality[QuocTich],F.Name[TenPhong],G.Name[LoaiPhong],G.Price[DonGia],C.DateCheckIn[NgayDen],C.DateCheckOut[NgayDi],A.RoomPrice[TienPhong],A.ServicePrice[TienDichVu],A.Surcharge[PhuThu],A.TotalPrice[ThanhTien],A.Discount[GiamGia]
from Bill A, CheckOutRoom B,BookRoom C, Customer D,CustomerType E,Room F,RoomType G
where A.IDReceiveRoom=B.ID and B.IDBookRoom=C.ID and C.IDCustomer=D.ID and D.IDCustomerType=E.ID and B.IDRoom=F.ID and F.IDRoomType=G.ID and A.ID=@idBill
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowBillPreView]...';


GO
CREATE proc [dbo].[USP_ShowBillPreView]
@idBill int
as
begin
	select D.Name [Tên dịch vụ],D.Price[Đơn giá],B.Count[Số lượng],B.TotalPrice[Thành tiền]
	from Bill A, BillDetails B, Service D
	where A.IDStatusBill=2 and A.ID=b.IDBill and A.ID=@idBill and B.IDService=D.ID
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowBillRoom]...';


GO
CREATE proc [dbo].[USP_ShowBillRoom]
@idRoom int
as
begin

	select A.Name RoomName,C.Price [Actual Price Per Night] ,B.DateCheckIn [Check-in Date],B.DateCheckOut as [Check-out Date], B.PriceChargedPerNight as [Price charged per night]
	from Room A, BookRoom B,RoomType C
	where A.ID = B.RoomNo
	and A.IDRoomType = c.ID
	and A.IDStatusRoom = 2
	and a.ID = @idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowCustomerFromReceiveRoom]...';


GO
CREATE proc [dbo].[USP_ShowCustomerFromReceiveRoom]
@idReceiveRoom int
as
begin
	select C.Name[Tên khách hàng],C.IDCard[CMND],C.Address[Địa chỉ],C.PhoneNumber[Số điện thoại],C.Nationality[Quốc tịch]
	from CheckOutRoom A, BookRoom B, Customer C
	where A.ID=@idReceiveRoom and A.IDBookRoom=B.ID and B.IDCustomer=C.ID
	union
	select C.Name[Tên khách hàng],C.IDCard[CMND],C.Address[Địa chỉ],C.PhoneNumber[Số điện thoại],C.Nationality[Quốc tịch]
	from CheckOutRoom A,CheckOutRoomDetails B,Customer C
	where A.ID=@idReceiveRoom and A.ID=B.IDReceiveRoom and B.IDCustomerOther=C.ID
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowReceiveRoom]...';


GO
CREATE proc [dbo].[USP_ShowReceiveRoom]
@idReceiveRoom int
as
begin
	select A.ID[Mã nhận phòng], C.Name[Tên phòng],B.DateCheckIn[Ngày nhận],B.DateCheckOut[Ngày trả]
	from CheckOutRoom A,BookRoom B,Room C
	where A.IDBookRoom=B.ID and A.IDRoom=C.ID and A.ID=@idReceiveRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_ShowServicesBill4Room]...';


GO
CREATE proc [dbo].[USP_ShowServicesBill4Room]
@idRoom int
as
begin
	select D.Name [Service Name], S2B.TotalPrice [Service Price], S2B.Count as [Quantity]
	from Room R, BookRoom BR, Service D, Service2Bill S2B
	where BR.RoomNo=@idRoom and R.ID = BR.RoomNo and S2B.IDRoom = BR.RoomNo and S2B.IDService = D.ID and S2B.Status != 2
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateAccount3]...';


GO
create proc [dbo].[USP_UpdateAccount3]
@username nvarchar(100),@address nvarchar(100),@phonenumber int
as
begin
	update Staff
	set Address=@address,PhoneNumber=@phonenumber
	where UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBill_Other]...';


GO
CREATE proc [dbo].[USP_UpdateBill_Other]
@idBill int,@discount int
as
begin
	declare @totalPrice int=0,@idRoom int
	select @totalPrice=RoomPrice+ServicePrice+ Surcharge
	from Bill
	where ID=@idBill

	update Bill
	set DateOfCreate=GETDATE(), TotalPrice=@totalPrice,Discount=@discount,IDStatusBill=2
	where ID=@idBill

	select @idRoom=B.IDRoom
	from Bill A, ReceiveRoom B
	where A.IDReceiveRoom=B.ID

	update Room
	set IDStatusRoom=1
	where ID=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBill_RoomPrice]...';


GO
CREATE proc [dbo].[USP_UpdateBill_RoomPrice]
@idBill int
as
begin
	declare @idReceiveRoom int,@roomPrice int =0,@price int,@days int,@countCustomer int,@limitPerson int,@check1 int,@check2 int,@surcharge int =0

	select @days=DATEDIFF(day,C.DateCheckIn,C.DateCheckOut),@price=D.Price,@limitPerson=D.LimitPerson,@idReceiveRoom=A.IDReceiveRoom
	from Bill A,CheckOutRoom B,BookRoom C,RoomType D,Room E
	where A.ID=@idBill and A.IDReceiveRoom=B.ID and B.IDRoom=E.ID and E.IDRoomType=D.ID and C.ID=B.IDBookRoom

	select @countCustomer=COUNT(B.IDReceiveRoom)
	from CheckOutRoom A,CheckOutRoomDetails B
	where A.ID=@idReceiveRoom and A.ID=B.IDReceiveRoom

	set @roomPrice=@price*@days;

	declare @QD3 float = 0 -- phu thu them
	select @QD3 = value from Parameter where Name = N'QĐ3'

	declare @QD4 float = 0 -- khach nuoc ngoai
	select @QD4 = value from Parameter where Name = N'QĐ4'

	if((@countCustomer+1-@limitPerson)>=0)
	set @surcharge=@roomPrice*@QD3*(@countCustomer+1-@limitPerson)

	select @check1=COUNT(*)
	from CheckOutRoom A,BookRoom B,Customer D
	where A.IDBookRoom=B.ID and B.IDCustomer=D.ID and D.Nationality!=N'Việt Nam' and A.ID=@idReceiveRoom
	select @check2=COUNT(*)
	from CheckOutRoom A,CheckOutRoomDetails C,Customer D
	where A.ID=C.IDReceiveRoom and D.ID=C.IDCustomerOther and D.Nationality!=N'Việt Nam' and A.ID=@idReceiveRoom

	if((@check1+@check2)>0) 
	set @surcharge=@surcharge + @roomPrice*(@QD4 - 1)

	update Bill
	set RoomPrice=@roomPrice, Surcharge=@surcharge
	where id=@idBill
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBill_ServicePrice]...';


GO
CREATE proc [dbo].[USP_UpdateBill_ServicePrice]
@idBill int
as
begin
	declare @totalServicePrice int=0
	select @totalServicePrice=SUM(TotalPrice)
	from BillDetails
	where IDBill=@idBill
	if(@totalServicePrice is null)
	set @totalServicePrice=0
	update Bill 
	set ServicePrice=@totalServicePrice
	where ID=@idBill
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBillAsPayment]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateBillAsPayment]
    @IDBookRoom INT,
    @AmountPaid INT,
    @IDstatusBill INT
AS
BEGIN
	    DECLARE @IDReceiveRoom INT;
		SELECT @IDReceiveRoom = Id
        FROM CheckOutRoom
        WHERE IDBookRoom = @IDBookRoom;
        UPDATE Bill 
        SET
            AmountPaid = @AmountPaid,
            IDstatusBill = @IDstatusBill
        WHERE
            IDReceiveRoom = @IDReceiveRoom
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBillDetails]...';


GO
CREATE proc [dbo].[USP_UpdateBillDetails]
@idBill int,@idService int,@_count int
as
begin
	declare @totalPrice int,@price int,@count int

	select @price=Price
	from Service
	where ID=@idService

	select @count=Count
	from Bill A,BillDetails B
	where A.ID=B.IDBill and A.ID=@idBill and A.IDStatusBill=1 and B.IDService=@idService

	set @count=@count+@_count
	if(@count>0)
	begin
		set @totalPrice=@count*@price
		update BillDetails
		set Count=@count,TotalPrice=@totalPrice
		where IDBill=@idBill and IDService=@idService
	end
	else
	begin
		delete from BillDetails
		where IDBill=@idBill and IDService=@idService
	end
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateBookRoom]...';


GO
create proc [dbo].[USP_UpdateBookRoom]
@id int,@idRoomType int,@dateCheckIn date,@datecheckOut date
as
begin
	update BookRoom
	set IDRoomType=@idRoomType,DateCheckIn=@dateCheckIn,DateCheckOut=@datecheckOut
	where ID=@id
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateCustomer]...';


GO
CREATE PROC [dbo].[USP_UpdateCustomer]
@id INT, @customerName NVARCHAR(100), @idCustomerType int, @idCardNow NVARCHAR(100), @address NVARCHAR(200),
@dateOfBirth date, @phoneNumber int, @sex NVARCHAR(100), @nationality NVARCHAR(100), @idCardPre NVARCHAR(100)
AS
BEGIN
	IF(@idCardPre != @idCardNow)
	begin
		DECLARE @count INT=0
		SELECT @count=COUNT(*)
		FROM dbo.Customer
		WHERE IDCard = @idCardNow
		IF(@count=0)
		BEGIN
			UPDATE dbo.Customer 
			SET 
			Name =@customerName, IDCustomerType = @idCustomerType, IDCard =@idCardNow,
			Address = @address, DateOfBirth =@dateOfBirth, PhoneNumber =@phoneNumber,
			Nationality = @nationality, Sex = @sex
			WHERE ID = @id
		END
	END
	ELSE
	BEGIN
		UPDATE dbo.Customer 
			SET 
			Name =@customerName, IDCustomerType = @idCustomerType,Address = @address,
			DateOfBirth =@dateOfBirth, PhoneNumber =@phoneNumber,
			Nationality = @nationality, Sex = @sex
			WHERE ID = @id
	end
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateCustomer_]...';


GO
create proc [dbo].[USP_UpdateCustomer_]
@id int,@name nvarchar(50),@idCard nvarchar(50),@idCustomerType int,@phoneNumber int, @dateOfBirth date,@address nvarchar(100),@sex nvarchar(20),@nationality nvarchar(100)
as
begin
	update Customer
	set Name=@name,IDCard=@idCard,IDCustomerType=@idCustomerType,PhoneNumber=@phoneNumber,DateOfBirth=@dateOfBirth,Address=@address,Sex=@sex,Nationality=@nationality
	where ID=@id
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateDisplayName]...';


GO
create proc [dbo].[USP_UpdateDisplayName]
@username nvarchar(100),@displayname nvarchar(100)
as
begin
	update Staff
	set DisplayName=@displayname
	where UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateInfo]...';


GO
CREATE proc [dbo].[USP_UpdateInfo]
@username nvarchar(100),@address nvarchar(100),@phonenumber int,@idcard nvarchar(100),@dateOfBirth date,@sex nvarchar(50)
as
begin
	update Staff
	set Address=@address,PhoneNumber=@phonenumber,IDCard=@idcard,Sex=@sex, DateOfBirth=@dateOfBirth
	where UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateParameter]...';


GO
CREATE PROC [dbo].[USP_UpdateParameter]
@name NVARCHAR(200), @value float, @describe NVARCHAR(200)
AS
BEGIN
UPDATE dbo.PARAMETER
	SET
	Value = @value,
	Describe = @describe,
	datemodify = GETDATE()
	WHERE name = @name
	SELECT @name = [dbo].[ConvertString](@name)
	IF(@name = 'QD2.1')
		UPDATE dbo.ROOMTYPE SET LimitPerson = @value WHERE ID = 1
	ELSE IF(@name = 'QD2.2')
		UPDATE dbo.ROOMTYPE SET LimitPerson = @value WHERE ID = 2
	ELSE IF(@name = 'QD2.3')
		UPDATE dbo.ROOMTYPE SET LimitPerson = @value WHERE ID = 3
	ELSE IF(@name = 'QD2.4')
		UPDATE dbo.ROOMTYPE SET LimitPerson = @value WHERE ID = 4
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdatePassword]...';


GO
create proc [dbo].[USP_UpdatePassword]
@username nvarchar(100),@password nvarchar(100)
as
begin
	update Staff
	set PassWord=@password
	where UserName=@username
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateReceiveRoom]...';


GO
CREATE proc [dbo].[USP_UpdateReceiveRoom]
@id int,@idRoom int
as
begin
	update CheckOutRoom
	set IDRoom=@idRoom
	where ID=@id

	update Room
	set IDStatusRoom=2
	where ID=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateRoom]...';


GO
CREATE PROC [dbo].[USP_UpdateRoom]
@id INT, @nameRoom NVARCHAR(100), @idRoomType INT, @idStatusRoom INT
AS
UPDATE dbo.Room
SET
	Name = @nameRoom, IDRoomType = @idRoomType, IDStatusRoom = @idStatusRoom
WHERE ID = @id
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateRoomType]...';


GO
CREATE PROC [dbo].[USP_UpdateRoomType]
@id INT, @name NVARCHAR(100), @price int, @limitPerson int
AS
	UPDATE RoomType
	SET
    name = @name, Price = @price, LimitPerson = @limitPerson
	WHERE id =@id
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateService]...';


GO
create proc [dbo].[USP_UpdateService]
@id int, @name nvarchar(200), @idServiceType int, @price int
as
begin
	update service
	set
	name = @name,
	idservicetype = @idservicetype,
	price = @price
	where id = @id
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateServiceType]...';


GO
CREATE PROC [dbo].[USP_UpdateServiceType]
@id INT, @name NVARCHAR(100)
AS
BEGIN
	UPDATE dbo.ServiceType
	SET
    name = @name
	WHERE id =@id
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateStaff]...';


GO
CREATE PROC [dbo].[USP_UpdateStaff]
@user NVARCHAR(100), @name NVARCHAR(100),@idStaffType INT,
@idCard NVARCHAR(100), @dateOfBirth DATE, @sex NVARCHAR(100),
@address NVARCHAR(200), @phoneNumber INT, @startDay DATE
AS
BEGIN
	DECLARE @count INT = 0
	SELECT @count=COUNT(*) FROM staff
	WHERE IDCard = @idCard AND UserName != @user
	IF(@count = 0)
	UPDATE dbo.STAFF
	SET
    displayname = @name, idstafftype = @idstafftype,
	idcard= @idCard, DateOfBirth = @dateOfBirth, sex = @sex,
	Address = @address, PhoneNumber = @phoneNumber, StartDay = @startDay
	WHERE UserName = @user
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateStaffType]...';


GO
CREATE PROC [dbo].[USP_UpdateStaffType] 
@id int, @name NVARCHAR(100)
AS
BEGIN
	UPDATE dbo.StaffType
	SET
    Name = @name
	WHERE ID = @id
END
GO
PRINT N'Creating Procedure [dbo].[USP_UpdateStatusRoom]...';


GO
create proc [dbo].[USP_UpdateStatusRoom]
@idRoom int
as
begin
	update Room
	set IDStatusRoom=1
	where ID=@idRoom
end
GO
PRINT N'Creating Procedure [dbo].[USP_InsertBookRoom]...';


GO
CREATE proc [dbo].[USP_InsertBookRoom]
@roomId int, @idCustomer int,@idRoomType int,@bookingType int, @roomName nvarchar(100),@datecheckin date,@datecheckout date,@datebookroom smalldatetime, @priceChargedPerNight int, @userName nvarchar(20)
as
begin
	insert into BookRoom (RoomNo, IDCustomer,IDRoomType, BookingType,DateCheckIn,DateCheckOut,DateBookRoom, PriceChargedPerNight)
	values(@roomId, @idCustomer,@idRoomType,@bookingType,@datecheckin,@datecheckout,@datebookroom, @priceChargedPerNight)
	update Room
	set IDStatusRoom = 2
	where Name = @roomName
	Exec USP_InsertHBookRoom @roomId, @idCustomer, @idRoomType, @bookingType, @datecheckin, @datecheckout, @datebookroom, @priceChargedPerNight, @userName
end
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.AccessRights'), OBJECT_ID(N'dbo.Bill'), OBJECT_ID(N'dbo.BillDetails'), OBJECT_ID(N'dbo.BookRoom'), OBJECT_ID(N'dbo.ChargeService2Room'), OBJECT_ID(N'dbo.CheckOutRoom'), OBJECT_ID(N'dbo.CheckOutRoomDetails'), OBJECT_ID(N'dbo.Customer'), OBJECT_ID(N'dbo.Payments'), OBJECT_ID(N'dbo.REPORT'), OBJECT_ID(N'dbo.Room'), OBJECT_ID(N'dbo.Service'), OBJECT_ID(N'dbo.Staff'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
